
Nucleo-F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080003dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  2000000c  080003e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080003e8  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003cb  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000120  00000000  00000000  00020400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000060  00000000  00000000  00020520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000048  00000000  00000000  00020580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001cdb  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000701  00000000  00000000  000222a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00007c94  00000000  00000000  000229a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0002a638  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000c0  00000000  00000000  0002a688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000000c 	.word	0x2000000c
 800014c:	00000000 	.word	0x00000000
 8000150:	080003bc 	.word	0x080003bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000010 	.word	0x20000010
 800016c:	080003bc 	.word	0x080003bc

08000170 <Tim3config>:
void delay(uint32_t ms);
void SetSysClockAs8MHz();


void Tim3config()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0

	/*Enable the Clock for Tim3*/

	RCC->APB1ENR |=(1<<1);
 8000174:	4b0e      	ldr	r3, [pc, #56]	; (80001b0 <Tim3config+0x40>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	69da      	ldr	r2, [r3, #28]
 800017a:	4b0d      	ldr	r3, [pc, #52]	; (80001b0 <Tim3config+0x40>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	f042 0202 	orr.w	r2, r2, #2
 8000182:	61da      	str	r2, [r3, #28]
	/*Set the Prescalar value as 7 for 1Mhz*/
	TIM3->PSC =7;
 8000184:	4b0b      	ldr	r3, [pc, #44]	; (80001b4 <Tim3config+0x44>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2207      	movs	r2, #7
 800018a:	629a      	str	r2, [r3, #40]	; 0x28
	/*Auto reload register to count upto 1000*/
	TIM3->ARR =999;
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <Tim3config+0x44>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000194:	62da      	str	r2, [r3, #44]	; 0x2c
	/*Enable the Counter*/
	TIM3->CR1 |=(1<<0);
 8000196:	4b07      	ldr	r3, [pc, #28]	; (80001b4 <Tim3config+0x44>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	4b05      	ldr	r3, [pc, #20]	; (80001b4 <Tim3config+0x44>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	f042 0201 	orr.w	r2, r2, #1
 80001a4:	601a      	str	r2, [r3, #0]

}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	20000000 	.word	0x20000000
 80001b4:	20000008 	.word	0x20000008

080001b8 <delay>:

void delay(uint32_t ms)
{
 80001b8:	b480      	push	{r7}
 80001ba:	b085      	sub	sp, #20
 80001bc:	af00      	add	r7, sp, #0
 80001be:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for(i=0;i<=ms/2;i++)
 80001c0:	2300      	movs	r3, #0
 80001c2:	60fb      	str	r3, [r7, #12]
 80001c4:	e016      	b.n	80001f4 <delay+0x3c>
	{
		/*Clear the counter*/
		TIM3->CNT=0;
 80001c6:	4b11      	ldr	r3, [pc, #68]	; (800020c <delay+0x54>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	2200      	movs	r2, #0
 80001cc:	625a      	str	r2, [r3, #36]	; 0x24
		while((TIM3->SR &TIM_SR_UIF)==0);
 80001ce:	bf00      	nop
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <delay+0x54>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	691b      	ldr	r3, [r3, #16]
 80001d6:	f003 0301 	and.w	r3, r3, #1
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d0f8      	beq.n	80001d0 <delay+0x18>
		TIM3->SR &= ~(1<<0);
 80001de:	4b0b      	ldr	r3, [pc, #44]	; (800020c <delay+0x54>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	691a      	ldr	r2, [r3, #16]
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <delay+0x54>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	f022 0201 	bic.w	r2, r2, #1
 80001ec:	611a      	str	r2, [r3, #16]
	for(i=0;i<=ms/2;i++)
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	3301      	adds	r3, #1
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	085b      	lsrs	r3, r3, #1
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d9e3      	bls.n	80001c6 <delay+0xe>
	}

}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	20000008 	.word	0x20000008

08000210 <SetSysClockAs8MHz>:
void SetSysClockAs8MHz()
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
	/* Enabling the HSI clock - If not enabled and ready */
		if((RCC->CR & RCC_CR_HSIRDY)==0)
 8000214:	4b26      	ldr	r3, [pc, #152]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	681a      	ldr	r2, [r3, #0]
 800021a:	4b25      	ldr	r3, [pc, #148]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	085b      	lsrs	r3, r3, #1
 8000222:	4013      	ands	r3, r2
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d114      	bne.n	8000256 <SetSysClockAs8MHz+0x46>
		{
			RCC->CR |=(1<<0);
 800022c:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b1f      	ldr	r3, [pc, #124]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f042 0201 	orr.w	r2, r2, #1
 800023a:	601a      	str	r2, [r3, #0]
			while( (RCC->CR & RCC_CR_HSIRDY) == 0);
 800023c:	bf00      	nop
 800023e:	4b1c      	ldr	r3, [pc, #112]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	085b      	lsrs	r3, r3, #1
 800024c:	4013      	ands	r3, r2
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d0f3      	beq.n	800023e <SetSysClockAs8MHz+0x2e>
		}

		/* Select APB2 prescaler to 1 */
		RCC->CFGR |=(4<<11);
 8000256:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	685a      	ldr	r2, [r3, #4]
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000264:	605a      	str	r2, [r3, #4]

		/* Select APB1 prescaler to 1 */
		RCC->CFGR |=(4<<8);
 8000266:	4b12      	ldr	r3, [pc, #72]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	685a      	ldr	r2, [r3, #4]
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000274:	605a      	str	r2, [r3, #4]

		/* Select AHB prescaler to 1 */
		RCC->CFGR |=(8<<4);
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	685a      	ldr	r2, [r3, #4]
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000284:	605a      	str	r2, [r3, #4]

		/* Select the system clock source */

		RCC->CFGR &=~(3<<1);
 8000286:	4b0a      	ldr	r3, [pc, #40]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	685a      	ldr	r2, [r3, #4]
 800028c:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f022 0206 	bic.w	r2, r2, #6
 8000294:	605a      	str	r2, [r3, #4]

		/* Disable  the HSE  clock source */

		RCC->CR &=~(1<<16);
 8000296:	4b06      	ldr	r3, [pc, #24]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <SetSysClockAs8MHz+0xa0>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000

080002b4 <main>:
#include "stm32f103xx.h"



int main(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	RCC->APB2ENR |=(1<<4);       // Enable the GPIOC clock
 80002b8:	4b16      	ldr	r3, [pc, #88]	; (8000314 <main+0x60>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	699a      	ldr	r2, [r3, #24]
 80002be:	4b15      	ldr	r3, [pc, #84]	; (8000314 <main+0x60>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f042 0210 	orr.w	r2, r2, #16
 80002c6:	619a      	str	r2, [r3, #24]
	GPIOC->CRH	 = 0x44444445;  // Setting the Port C 8th pin as Output
 80002c8:	4b13      	ldr	r3, [pc, #76]	; (8000318 <main+0x64>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a13      	ldr	r2, [pc, #76]	; (800031c <main+0x68>)
 80002ce:	605a      	str	r2, [r3, #4]
	RCC->CR      =0x00000083;   //Selecting the HSI Clock
 80002d0:	4b10      	ldr	r3, [pc, #64]	; (8000314 <main+0x60>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2283      	movs	r2, #131	; 0x83
 80002d6:	601a      	str	r2, [r3, #0]


	SetSysClockAs8MHz();
 80002d8:	f7ff ff9a 	bl	8000210 <SetSysClockAs8MHz>

	Tim3config();
 80002dc:	f7ff ff48 	bl	8000170 <Tim3config>

	while(1)
	{
		GPIOC->BSRR |=(1<<8);		//Set the PC_8 pin
 80002e0:	4b0d      	ldr	r3, [pc, #52]	; (8000318 <main+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	691a      	ldr	r2, [r3, #16]
 80002e6:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <main+0x64>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002ee:	611a      	str	r2, [r3, #16]
		delay(1000);
 80002f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002f4:	f7ff ff60 	bl	80001b8 <delay>
		GPIOC->BSRR |=(1<<24);		//ReSet the PC_8 pin
 80002f8:	4b07      	ldr	r3, [pc, #28]	; (8000318 <main+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	691a      	ldr	r2, [r3, #16]
 80002fe:	4b06      	ldr	r3, [pc, #24]	; (8000318 <main+0x64>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000306:	611a      	str	r2, [r3, #16]
		delay(1000);
 8000308:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030c:	f7ff ff54 	bl	80001b8 <delay>
		GPIOC->BSRR |=(1<<8);		//Set the PC_8 pin
 8000310:	e7e6      	b.n	80002e0 <main+0x2c>
 8000312:	bf00      	nop
 8000314:	20000000 	.word	0x20000000
 8000318:	20000004 	.word	0x20000004
 800031c:	44444445 	.word	0x44444445

08000320 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000320:	480d      	ldr	r0, [pc, #52]	; (8000358 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000322:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000324:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <LoopForever+0x6>)
  ldr r1, =_edata
 800032a:	490d      	ldr	r1, [pc, #52]	; (8000360 <LoopForever+0xa>)
  ldr r2, =_sidata
 800032c:	4a0d      	ldr	r2, [pc, #52]	; (8000364 <LoopForever+0xe>)
  movs r3, #0
 800032e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000330:	e002      	b.n	8000338 <LoopCopyDataInit>

08000332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000336:	3304      	adds	r3, #4

08000338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800033a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800033c:	d3f9      	bcc.n	8000332 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800033e:	4a0a      	ldr	r2, [pc, #40]	; (8000368 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <LoopForever+0x16>)
  movs r3, #0
 8000342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000344:	e001      	b.n	800034a <LoopFillZerobss>

08000346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000348:	3204      	adds	r2, #4

0800034a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800034a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800034c:	d3fb      	bcc.n	8000346 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800034e:	f000 f811 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000352:	f7ff ffaf 	bl	80002b4 <main>

08000356 <LoopForever>:

LoopForever:
  b LoopForever
 8000356:	e7fe      	b.n	8000356 <LoopForever>
  ldr   r0, =_estack
 8000358:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800035c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000360:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000364:	080003dc 	.word	0x080003dc
  ldr r2, =_sbss
 8000368:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800036c:	20000028 	.word	0x20000028

08000370 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000370:	e7fe      	b.n	8000370 <ADC1_2_IRQHandler>
	...

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	2600      	movs	r6, #0
 8000378:	4d0c      	ldr	r5, [pc, #48]	; (80003ac <__libc_init_array+0x38>)
 800037a:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037c:	1b64      	subs	r4, r4, r5
 800037e:	10a4      	asrs	r4, r4, #2
 8000380:	42a6      	cmp	r6, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	f000 f81a 	bl	80003bc <_init>
 8000388:	2600      	movs	r6, #0
 800038a:	4d0a      	ldr	r5, [pc, #40]	; (80003b4 <__libc_init_array+0x40>)
 800038c:	4c0a      	ldr	r4, [pc, #40]	; (80003b8 <__libc_init_array+0x44>)
 800038e:	1b64      	subs	r4, r4, r5
 8000390:	10a4      	asrs	r4, r4, #2
 8000392:	42a6      	cmp	r6, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f855 3b04 	ldr.w	r3, [r5], #4
 800039c:	4798      	blx	r3
 800039e:	3601      	adds	r6, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a6:	4798      	blx	r3
 80003a8:	3601      	adds	r6, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
